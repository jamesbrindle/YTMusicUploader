.TH "YTMusicUploader.Business.MusicDataFetcher" 3 "Wed May 12 2021" "YT Music Uploader" \" -*- nroff -*-
.ad l
.nh
.SH NAME
YTMusicUploader.Business.MusicDataFetcher \- Gets meta data / tag information from the music file itself and looks up any missing data using a \fBMusicBrainz\fP API implementation (for instance album cover art, in which it will lookup CoverArtArchive: https://coverartarchive.org/  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBTrackAndReleaseMbId\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMusicDataFetcher\fP ()"
.br
.RI "Gets meta data / tag information from the music file itself and looks up any missing data using a \fBMusicBrainz\fP API implementation (for instance album cover art)\&. "
.ti -1c
.RI "async Task< string > \fBGetTrackMbId\fP (string path, bool tryMusicBrainz)"
.br
.RI "First looks at the file meta data for the track MBID then makes a request to \fBMusicBrainz\fP if it's not found "
.ti -1c
.RI "async Task< string > \fBGetReleaseMbId\fP (string path, bool tryMusicBrainz)"
.br
.RI "First looks at the file meta data for the release MBID, then makes a request to \fBMusicBrainz\fP if it's not found "
.ti -1c
.RI "\fBTrackAndReleaseMbId\fP \fBGetTrackAndReleaseMbId\fP (string path, bool tryWithMusicBrainz)"
.br
.RI "Get just the track MBID and ReleaseMBID from the music file or optionally from \fBMusicBrainz\fP if not present "
.ti -1c
.RI "\fBRecording\fP \fBGetRecordingFromMusicBrainzWithAlbumNameVariation\fP (string artist, string album, string track)"
.br
.RI "Get the recording (track data) from \fBMusicBrainz\fP via query using the artist, album an track names\&. This method also tries different variations of the album name "
.ti -1c
.RI "\fBRecording\fP \fBGetRecordingFromMusicBrainzWithAlbumNameVariation\fP (string path)"
.br
.RI "Get the recording (track data) from \fBMusicBrainz\fP via query using the artist, album an track names from the music file meta data This method also tries different variations of the album name "
.ti -1c
.RI "\fBRecording\fP \fBGetRecordingFromMusicBrainz\fP (string artist, string album, string track)"
.br
.RI "Get the recording (track data) from \fBMusicBrainz\fP via query using the artist, album an track names "
.ti -1c
.RI "\fBRecording\fP \fBGetRecordingFromMusicBrainz\fP (string mbId)"
.br
.RI "Get the recording (track data) from \fBMusicBrainz\fP via the MBID "
.ti -1c
.RI "\fBRelease\fP \fBGetReleaseFromMusicBrainzWithAlbumNameVariation\fP (string artist, string album)"
.br
.RI "Get the release (typically, the album data) from \fBMusicBrainz\fP via query using the artist, album an track names This method also tries different variations of the album name "
.ti -1c
.RI "\fBRelease\fP \fBGetReleaseFromMusicBrainz\fP (string artist, string album)"
.br
.RI "Get the release (typically, the album data) from \fBMusicBrainz\fP via query using the artist, album an track names "
.ti -1c
.RI "\fBRelease\fP \fBGetReleaseFromMusicBrainz\fP (string mbid)"
.br
.RI "Get the release (typically, the album data) from \fBMusicBrainz\fP via the MBID "
.ti -1c
.RI "async Task< Image > \fBGetAlbumArtwork\fP (string path, bool tryMusicBrainz=true)"
.br
.RI "Returns album artwork\&. First it will look at actual file to see if one is embedded, if not it will make a request to get the MBID, then use that to make a requst to ConvertArchive to try and retrive the album art cover image "
.ti -1c
.RI "Image \fBGetAlbumArtworkFromCoverArtArchive\fP (string pathOrMbid, bool isPath)"
.br
.RI "Makes a requst to ConvertArchive to try and retrive the album art cover image "
.ti -1c
.RI "\fBMusicFileMetaData\fP \fBGetMusicFileMetaData\fP (string path, out string metaDataString)"
.br
.RI "Returns \fBMusicFileMetaData\fP object of music file meta data such as: "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static TagLib\&.File \fBGetMusicTagLibFile\fP (string path)"
.br
.RI "Gets a TabLib (TabLib library object of music file meta data) file object of a given music music file "
.ti -1c
.RI "static byte[] \fBGetImageBytesFromUrl\fP (string url)"
.br
.RI "Peforms a HTTP web request and downloads an image "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "\fBMusicBrainzClient\fP \fBMusicBrainzClient\fP\fC [get, set]\fP"
.br
.RI "\&.Net implementation client of \fBMusicBrainz\fP API "
.in -1c
.SH "Detailed Description"
.PP 
Gets meta data / tag information from the music file itself and looks up any missing data using a \fBMusicBrainz\fP API implementation (for instance album cover art, in which it will lookup CoverArtArchive: https://coverartarchive.org/ 

Thanks to: avatar29A https://github.com/avatar29A/MusicBrainz
.PP
NOTE: Only 1 request per second allowed via \fBMusicBrainz\fP API, hence plenty of 'Thread\&.Sleep(1100)' commands\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "YTMusicUploader\&.Business\&.MusicDataFetcher\&.MusicDataFetcher ()"

.PP
Gets meta data / tag information from the music file itself and looks up any missing data using a \fBMusicBrainz\fP API implementation (for instance album cover art)\&. 
.SH "Member Function Documentation"
.PP 
.SS "async Task<Image> YTMusicUploader\&.Business\&.MusicDataFetcher\&.GetAlbumArtwork (string path, bool tryMusicBrainz = \fCtrue\fP)"

.PP
Returns album artwork\&. First it will look at actual file to see if one is embedded, if not it will make a request to get the MBID, then use that to make a requst to ConvertArchive to try and retrive the album art cover image 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to the music file
.br
\fItryMusicBrainz\fP Use \fBMusicBrainz\fP as a fallback
.RE
.PP
\fBReturns\fP
.RS 4
Thumbnail image
.RE
.PP

.SS "Image YTMusicUploader\&.Business\&.MusicDataFetcher\&.GetAlbumArtworkFromCoverArtArchive (string pathOrMbid, bool isPath)"

.PP
Makes a requst to ConvertArchive to try and retrive the album art cover image 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to the music file
.RE
.PP
\fBReturns\fP
.RS 4
Thumbnail image
.RE
.PP

.SS "static byte [] YTMusicUploader\&.Business\&.MusicDataFetcher\&.GetImageBytesFromUrl (string url)\fC [static]\fP"

.PP
Peforms a HTTP web request and downloads an image 
.SS "\fBMusicFileMetaData\fP YTMusicUploader\&.Business\&.MusicDataFetcher\&.GetMusicFileMetaData (string path, out string metaDataString)"

.PP
Returns \fBMusicFileMetaData\fP object of music file meta data such as: 
.IP "\(bu" 2
Artist
.IP "\(bu" 2
Album name
.IP "\(bu" 2
Track name
.IP "\(bu" 2
Duration
.IP "\(bu" 2
Bitrate
.PP
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to music file
.RE
.PP
\fBReturns\fP
.RS 4
Multi-line string
.RE
.PP

.SS "static TagLib\&.File YTMusicUploader\&.Business\&.MusicDataFetcher\&.GetMusicTagLibFile (string path)\fC [static]\fP"

.PP
Gets a TabLib (TabLib library object of music file meta data) file object of a given music music file 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to music file
.RE
.PP
\fBReturns\fP
.RS 4
TagLib File
.RE
.PP

.SS "\fBRecording\fP YTMusicUploader\&.Business\&.MusicDataFetcher\&.GetRecordingFromMusicBrainz (string artist, string album, string track)"

.PP
Get the recording (track data) from \fBMusicBrainz\fP via query using the artist, album an track names 
.PP
\fBReturns\fP
.RS 4
\fBMusicBrainz\fP Recording object
.RE
.PP

.SS "\fBRecording\fP YTMusicUploader\&.Business\&.MusicDataFetcher\&.GetRecordingFromMusicBrainz (string mbId)"

.PP
Get the recording (track data) from \fBMusicBrainz\fP via the MBID 
.PP
\fBReturns\fP
.RS 4
\fBMusicBrainz\fP Recording object
.RE
.PP

.SS "\fBRecording\fP YTMusicUploader\&.Business\&.MusicDataFetcher\&.GetRecordingFromMusicBrainzWithAlbumNameVariation (string artist, string album, string track)"

.PP
Get the recording (track data) from \fBMusicBrainz\fP via query using the artist, album an track names\&. This method also tries different variations of the album name 
.PP
\fBReturns\fP
.RS 4
\fBMusicBrainz\fP Recording object
.RE
.PP

.SS "\fBRecording\fP YTMusicUploader\&.Business\&.MusicDataFetcher\&.GetRecordingFromMusicBrainzWithAlbumNameVariation (string path)"

.PP
Get the recording (track data) from \fBMusicBrainz\fP via query using the artist, album an track names from the music file meta data This method also tries different variations of the album name 
.PP
\fBReturns\fP
.RS 4
\fBMusicBrainz\fP Recording object
.RE
.PP

.SS "\fBRelease\fP YTMusicUploader\&.Business\&.MusicDataFetcher\&.GetReleaseFromMusicBrainz (string artist, string album)"

.PP
Get the release (typically, the album data) from \fBMusicBrainz\fP via query using the artist, album an track names 
.PP
\fBReturns\fP
.RS 4
\fBMusicBrainz\fP Release object
.RE
.PP

.SS "\fBRelease\fP YTMusicUploader\&.Business\&.MusicDataFetcher\&.GetReleaseFromMusicBrainz (string mbid)"

.PP
Get the release (typically, the album data) from \fBMusicBrainz\fP via the MBID 
.PP
\fBReturns\fP
.RS 4
\fBMusicBrainz\fP Release object
.RE
.PP

.SS "\fBRelease\fP YTMusicUploader\&.Business\&.MusicDataFetcher\&.GetReleaseFromMusicBrainzWithAlbumNameVariation (string artist, string album)"

.PP
Get the release (typically, the album data) from \fBMusicBrainz\fP via query using the artist, album an track names This method also tries different variations of the album name 
.PP
\fBReturns\fP
.RS 4
\fBMusicBrainz\fP Release object
.RE
.PP

.SS "async Task<string> YTMusicUploader\&.Business\&.MusicDataFetcher\&.GetReleaseMbId (string path, bool tryMusicBrainz)"

.PP
First looks at the file meta data for the release MBID, then makes a request to \fBMusicBrainz\fP if it's not found 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to music file
.br
\fItryMusicBrainz\fP Use \fBMusicBrainz\fP as a fallback
.RE
.PP
\fBReturns\fP
.RS 4
\fBMusicBrainz\fP ID
.RE
.PP

.SS "\fBTrackAndReleaseMbId\fP YTMusicUploader\&.Business\&.MusicDataFetcher\&.GetTrackAndReleaseMbId (string path, bool tryWithMusicBrainz)"

.PP
Get just the track MBID and ReleaseMBID from the music file or optionally from \fBMusicBrainz\fP if not present 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Path to music file
.br
\fItryWithMusicBrainz\fP Try to get the data from \fBMusicBrainz\fP if not present
.RE
.PP
\fBReturns\fP
.RS 4
\fBTrackAndReleaseMbId\fP object
.RE
.PP

.SS "async Task<string> YTMusicUploader\&.Business\&.MusicDataFetcher\&.GetTrackMbId (string path, bool tryMusicBrainz)"

.PP
First looks at the file meta data for the track MBID then makes a request to \fBMusicBrainz\fP if it's not found 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP Full path to music file
.br
\fItryMusicBrainz\fP Use \fBMusicBrainz\fP as a fallback
.RE
.PP
\fBReturns\fP
.RS 4
\fBMusicBrainz\fP ID
.RE
.PP

.SH "Property Documentation"
.PP 
.SS "\fBMusicBrainzClient\fP YTMusicUploader\&.Business\&.MusicDataFetcher\&.MusicBrainzClient\fC [get]\fP, \fC [set]\fP"

.PP
\&.Net implementation client of \fBMusicBrainz\fP API 

.SH "Author"
.PP 
Generated automatically by Doxygen for YT Music Uploader from the source code\&.
