.TH "YTMusicUploader.Providers.Requests" 3 "Wed May 12 2021" "YT Music Uploader" \" -*- nroff -*-
.ad l
.nh
.SH NAME
YTMusicUploader.Providers.Requests \- YouTube Music API Request Methods  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBPlaylists\fP"
.br
.RI "YouTube Music API request methods specifically for playlist manipulation "
.ti -1c
.RI "class \fBUploadCheckCache\fP"
.br
.RI "Object to store pre fetched already uploaded check results "
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBUploadCheckResult\fP { \fBUploadCheckResult\&.NotPresent\fP, \fBUploadCheckResult\&.Present_FromCache\fP, \fBUploadCheckResult\&.Present_NewRequest\fP }"
.br
.RI "Not present or present with an indication of where the result came from - a new request or from the cache "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBIsAuthenticated\fP (string cookieValue)"
.br
.RI "HttpWebRequest POST request to send to YouTube to check if the user's is authenticated (signed in) by determining if a generic request is successful given the current authentication cookie value we have stored\&. /// In this case, we're actually perform a request for personally uploaded music files "
.ti -1c
.RI "static void \fBLoadArtistCache\fP (string authenticationCookie)"
.br
.RI "Set the uploaded artist cached gathered from YouTube Music "
.ti -1c
.RI "static void \fBStartPrefetchingUploadedFilesCheck\fP (\fBList\fP< \fBMusicFile\fP > musicFilesList, string cookieValue, \fBMusicDataFetcher\fP musicDataFetcher=null)"
.br
.RI "Starts a new thread which loops through MusicFiles to check if they've already been uploaded to YouTube Music ahead of time and stores them in a cache to speed up the upload checker\&. "
.ti -1c
.RI "static \fBUploadCheckResult\fP \fBIsSongUploaded\fP (string musicFilePath, string cookieValue, ref string entityId, out string videoId, \fBMusicDataFetcher\fP musicDataFetcher=null, bool checkCache=true, bool parallel=true)"
.br
.RI "HttpWebRequest POST request to send to YouTube to determine if the song about to be uploaded already exists It may request a little attention depending on the results, seen as though we're trying to match a song based on artist, album and track name, which may be slightly different in the uploading music file's meta tags\&. Currently it uses a Levenshtein distance fuzzy logic implementation to check similarity between strings and is considered a match if it's above 0\&.75\&. "
.ti -1c
.RI "static bool \fBDeleteAlbumOrTrackFromYTMusic\fP (string cookieValue, string entityId, out string errorMessage)"
.br
.RI "HttpWebRequest POST request to send to YouTube delete a YT music track fro the users uploads "
.ti -1c
.RI "static \fBArtistCache\fP \fBGetArtists\fP (string cookieValue, \fBArtistCache\fP artistCache=null, string continuationToken=null)"
.br
.RI "HttpWebRequest POST request - Recursively fetches all the artists from YouTube Music's 'Upload' section "
.ti -1c
.RI "static AlbumSongCollection \fBGetArtistSongs\fP (string cookieValue, string browseId, AlbumSongCollection albumSongCollection=null, string continuationToken=null)"
.br
.RI "HttpWebRequest POST request - Recursively fetches all the songs of an artist from YouTube Music's 'Upload' section "
.ti -1c
.RI "static bool \fBUploadTrack\fP (\fBMainForm\fP mainForm, string cookieValue, string filePath, int maxUploadSpeed, out string error)"
.br
.RI "HttpWebRequest POST request to send to YouTube to upload a music file\&. "
.ti -1c
.RI "static HttpWebRequest \fBAddStandardHeaders\fP (HttpWebRequest webRequest, string cookieValue)"
.br
.RI "Required headers for any YouTube music API request "
.ti -1c
.RI "static byte[] \fBGetPostBytes\fP (string stringToEncode)"
.br
.RI "Converts a string to a byte array for use in a HttpWebRequest upload stream (UTF8 encoded)\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "static \fBArtistCache\fP \fBArtistCache\fP = null\fC [get, set]\fP"
.br
.ti -1c
.RI "static Thread \fBUploadCheckPreloaderThread\fP = null\fC [get, set]\fP"
.br
.ti -1c
.RI "static Thread \fBUploadCheckPreloaderSleepThread\fP = null\fC [get, set]\fP"
.br
.ti -1c
.RI "static bool \fBIssueWithGatheringUploadedMusic\fP = false\fC [get, set]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
YouTube Music API Request Methods 

YouTube music HttpWebRequest abstract class
.PP
Thanks to: sigma67: https://ytmusicapi.readthedocs.io/en/latest/ https://github.com/sigma67/ytmusicapi
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBYTMusicUploader\&.Providers\&.Requests\&.UploadCheckResult\fP\fC [strong]\fP"

.PP
Not present or present with an indication of where the result came from - a new request or from the cache 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINotPresent \fP\fP
.TP
\fB\fIPresent_FromCache \fP\fP
.TP
\fB\fIPresent_NewRequest \fP\fP
.SH "Member Function Documentation"
.PP 
.SS "static HttpWebRequest YTMusicUploader\&.Providers\&.Requests\&.AddStandardHeaders (HttpWebRequest webRequest, string cookieValue)\fC [static]\fP"

.PP
Required headers for any YouTube music API request 
.PP
\fBParameters\fP
.RS 4
\fIwebRequest\fP HttpWebRequest to add the headers to
.br
\fIcookieValue\fP Cookie from a previous YouTube Music sign in via this application (stored in the database)
.RE
.PP
\fBReturns\fP
.RS 4
The same HttpWebReqest object with added default headers
.RE
.PP

.SS "static bool YTMusicUploader\&.Providers\&.Requests\&.DeleteAlbumOrTrackFromYTMusic (string cookieValue, string entityId, out string errorMessage)\fC [static]\fP"

.PP
HttpWebRequest POST request to send to YouTube delete a YT music track fro the users uploads 
.PP
\fBParameters\fP
.RS 4
\fIcookieValue\fP Cookie from a previous YouTube Music sign in via this application (stored in the database)
.br
\fIentityId\fP YT Music entity ID to delete
.RE
.PP
\fBReturns\fP
.RS 4
True if successfully authenticated, false otherwise
.RE
.PP

.SS "static \fBArtistCache\fP YTMusicUploader\&.Providers\&.Requests\&.GetArtists (string cookieValue, \fBArtistCache\fP artistCache = \fCnull\fP, string continuationToken = \fCnull\fP)\fC [static]\fP"

.PP
HttpWebRequest POST request - Recursively fetches all the artists from YouTube Music's 'Upload' section 
.PP
\fBParameters\fP
.RS 4
\fIcookieValue\fP Cookie from a previous YouTube Music sign in via this application (stored in the database)
.br
\fIartistCache\fP Input ArtistCache object (should be empty when initialising - this is a recursive method)
.br
\fIcontinuationToken\fP Token from YouTube Music indicated more results to fetch, and the token to get them (shoult be empty when initialising - this is a recursive method)
.RE
.PP
\fBReturns\fP
.RS 4
ArtistCache object
.RE
.PP

.SS "static AlbumSongCollection YTMusicUploader\&.Providers\&.Requests\&.GetArtistSongs (string cookieValue, string browseId, AlbumSongCollection albumSongCollection = \fCnull\fP, string continuationToken = \fCnull\fP)\fC [static]\fP"

.PP
HttpWebRequest POST request - Recursively fetches all the songs of an artist from YouTube Music's 'Upload' section 
.PP
\fBParameters\fP
.RS 4
\fIcookieValue\fP Cookie from a previous YouTube Music sign in via this application (stored in the database)
.br
\fIbrowseId\fP YouTube Music's navigation ID for an individual artist, retreived from 'GetArtists' request
.br
\fIsongs\fP Input ArtistCache 'Songs' object (should be empty when initialising - this is a recursive method)
.br
\fIcontinuationToken\fP Token from YouTube Music indicated more results to fetch, and the token to get them (shoult be empty when initialising - this is a recursive method)
.RE
.PP
\fBReturns\fP
.RS 4
ArtistCache object
.RE
.PP

.SS "static byte [] YTMusicUploader\&.Providers\&.Requests\&.GetPostBytes (string stringToEncode)\fC [static]\fP"

.PP
Converts a string to a byte array for use in a HttpWebRequest upload stream (UTF8 encoded)\&. 
.PP
\fBParameters\fP
.RS 4
\fIstringToEncode\fP String to convert to a UTF8 encoded byte array
.RE
.PP
\fBReturns\fP
.RS 4
UTF8 encoded byte arra
.RE
.PP

.SS "static bool YTMusicUploader\&.Providers\&.Requests\&.IsAuthenticated (string cookieValue)\fC [static]\fP"

.PP
HttpWebRequest POST request to send to YouTube to check if the user's is authenticated (signed in) by determining if a generic request is successful given the current authentication cookie value we have stored\&. /// In this case, we're actually perform a request for personally uploaded music files 
.PP
\fBParameters\fP
.RS 4
\fIcookieValue\fP Cookie from a previous YouTube Music sign in via this application (stored in the database)
.RE
.PP
\fBReturns\fP
.RS 4
True if successfully authenticated, false otherwise
.RE
.PP

.SS "static \fBUploadCheckResult\fP YTMusicUploader\&.Providers\&.Requests\&.IsSongUploaded (string musicFilePath, string cookieValue, ref string entityId, out string videoId, \fBMusicDataFetcher\fP musicDataFetcher = \fCnull\fP, bool checkCache = \fCtrue\fP, bool parallel = \fCtrue\fP)\fC [static]\fP"

.PP
HttpWebRequest POST request to send to YouTube to determine if the song about to be uploaded already exists It may request a little attention depending on the results, seen as though we're trying to match a song based on artist, album and track name, which may be slightly different in the uploading music file's meta tags\&. Currently it uses a Levenshtein distance fuzzy logic implementation to check similarity between strings and is considered a match if it's above 0\&.75\&. 
.PP
\fBParameters\fP
.RS 4
\fImusicFilePath\fP Path to music file to be uploaded
.br
\fIcookieValue\fP Cookie from a previous YouTube Music sign in via this application (stored in the database)
.br
\fIentityId\fP Output YouTube Music song entity ID if found
.br
\fImusicDataFetcher\fP You can pass an existing MusicDataFetcher object, or one will be created if left blank
.br
\fIcheckCache\fP Whether or not to refer to cache for lookup (only useful while scanning)/param> 
.PP
\fBReturns\fP
.RS 4
True if song is found, false otherwise
.RE
.PP
.RE
.PP

.SS "static void YTMusicUploader\&.Providers\&.Requests\&.LoadArtistCache (string authenticationCookie)\fC [static]\fP"

.PP
Set the uploaded artist cached gathered from YouTube Music 
.SS "static void YTMusicUploader\&.Providers\&.Requests\&.StartPrefetchingUploadedFilesCheck (\fBList\fP< \fBMusicFile\fP > musicFilesList, string cookieValue, \fBMusicDataFetcher\fP musicDataFetcher = \fCnull\fP)\fC [static]\fP"

.PP
Starts a new thread which loops through MusicFiles to check if they've already been uploaded to YouTube Music ahead of time and stores them in a cache to speed up the upload checker\&. 
.PP
\fBParameters\fP
.RS 4
\fImusicFilesList\fP Path to music file to be uploaded
.br
\fIcookieValue\fP Cookie from a previous YouTube Music sign in via this application (stored in the database)
.br
\fImusicDataFetcher\fP You can pass an existing MusicDataFetcher object, or one will be created if left blank
.RE
.PP

.SS "static bool YTMusicUploader\&.Providers\&.Requests\&.UploadTrack (\fBMainForm\fP mainForm, string cookieValue, string filePath, int maxUploadSpeed, out string error)\fC [static]\fP"

.PP
HttpWebRequest POST request to send to YouTube to upload a music file\&. 
.PP
\fBParameters\fP
.RS 4
\fImainForm\fP Instance of the main form to utilise the public methods of and update status'
.br
\fIcookieValue\fP Cookie from a previous YouTube Music sign in via this application (stored in the database)
.br
\fIfilePath\fP Full path to file we're uploading
.br
\fImaxUploadSpeed\fP Throttle database bandwidth speed (bytes per second)
.br
\fIerror\fP OUTPUT error string
.RE
.PP
\fBReturns\fP
.RS 4
True if the upload is successful, false otherwise
.RE
.PP

.SH "Property Documentation"
.PP 
.SS "\fBArtistCache\fP YTMusicUploader\&.Providers\&.Requests\&.ArtistCache = null\fC [static]\fP, \fC [get]\fP, \fC [set]\fP"

.SS "bool YTMusicUploader\&.Providers\&.Requests\&.IssueWithGatheringUploadedMusic = false\fC [static]\fP, \fC [get]\fP, \fC [set]\fP"

.SS "Thread YTMusicUploader\&.Providers\&.Requests\&.UploadCheckPreloaderSleepThread = null\fC [static]\fP, \fC [get]\fP, \fC [set]\fP"

.SS "Thread YTMusicUploader\&.Providers\&.Requests\&.UploadCheckPreloaderThread = null\fC [static]\fP, \fC [get]\fP, \fC [set]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for YT Music Uploader from the source code\&.
